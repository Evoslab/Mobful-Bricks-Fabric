plugins {
	id 'fabric-loom' version '0.9-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
group = project.maven_group
if (System.env.CI == "true") {
	version = "${project.mod_version}+a${System.env.GITHUB_RUN_NUMBER}.${System.env.GITHUB_REF.replaceAll("refs/heads/", "").replaceAll("/", "-")}"
}
else {
	version = "${project.mod_version}+${project.minecraft_version}-fabric"
}

repositories {
	maven {url = "https://www.cursemaven.com"}
	maven {url "https://maven.shedaniel.me/"}
}

loom {
	accessWidenerPath = file("src/main/resources/mobfulbricks.accesswidener")

	runs {
		data {
			server()

			vmArg "-Dmobfulbricks.datagen=true"
			vmArg "-Dmmobfulbricks.datagen.path=\"${project.file("src/generated/resources")};${project.file("$buildDir/resources/main")}\""
		}
	}
}

dependencies {
	// Main Fabric //
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Cloth Api //
	modImplementation "me.shedaniel.cloth.api:cloth-datagen-api-v1:${project.cloth_api_version}"
	include "me.shedaniel.cloth.api:cloth-datagen-api-v1:${project.cloth_api_version}"

	// Differentiate //
	modImplementation "curse.maven:differentiate-fabric-525575:${project.differentiate_version}"
	include "curse.maven:differentiate-fabric-525575:${project.differentiate_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	it.options.release = 16
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	repositories {
	}
}

processResources {
	if (project.getProperties().containsKey("auto_datagen") && Boolean.parseBoolean("${project.getProperties().get("auto_datagen")}")) {
		finalizedBy runData
	}
}

sourceSets.main.resources {
	srcDirs += "$projectDir/src/generated/resources"
}